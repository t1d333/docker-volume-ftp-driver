// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/t1d333/docker-volume-ftp-driver/internal/models"

	volume "github.com/docker/go-plugins-helpers/volume"
)

// MountManager is an autogenerated mock type for the MountManager type
type MountManager struct {
	mock.Mock
}

// Mount provides a mock function with given fields: vol, opt
func (_m *MountManager) Mount(vol *volume.Volume, opt *models.VolumeOptions) (string, error) {
	ret := _m.Called(vol, opt)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*volume.Volume, *models.VolumeOptions) (string, error)); ok {
		return rf(vol, opt)
	}
	if rf, ok := ret.Get(0).(func(*volume.Volume, *models.VolumeOptions) string); ok {
		r0 = rf(vol, opt)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*volume.Volume, *models.VolumeOptions) error); ok {
		r1 = rf(vol, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: vol
func (_m *MountManager) Remove(vol *volume.Volume) error {
	ret := _m.Called(vol)

	var r0 error
	if rf, ok := ret.Get(0).(func(*volume.Volume) error); ok {
		r0 = rf(vol)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unmount provides a mock function with given fields: vol
func (_m *MountManager) Unmount(vol *volume.Volume) error {
	ret := _m.Called(vol)

	var r0 error
	if rf, ok := ret.Get(0).(func(*volume.Volume) error); ok {
		r0 = rf(vol)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMountManager creates a new instance of MountManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMountManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MountManager {
	mock := &MountManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
